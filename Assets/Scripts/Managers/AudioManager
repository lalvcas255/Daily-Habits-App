using UnityEngine;
using System.Collections.Generic;

public class AudioManager : MonoBehaviour
{
    public static AudioManager Instance { get; private set; }

    [Header("Audio Sources")]
    public AudioSource musicSource;
    public AudioSource sfxSource;

    [Header("Music Clips")]
    public AudioClip menuMusic;
    public AudioClip gameplayMusic;

    [Header("SFX Clips")]
    public AudioClip habitCompleteSound;
    public AudioClip levelUpSound;
    public AudioClip achievementSound;
    public AudioClip buttonClickSound;
    public AudioClip errorSound;
    public AudioClip xpGainSound;

    [Header("Settings")]
    [Range(0f, 1f)] public float masterVolume = 1f;
    [Range(0f, 1f)] public float musicVolume = 0.7f;
    [Range(0f, 1f)] public float sfxVolume = 1f;

    private Dictionary<string, AudioClip> sfxDictionary;

    private void Awake()
    {
        if (Instance != null && Instance != this)
        {
            Destroy(gameObject);
            return;
        }
        Instance = this;
        DontDestroyOnLoad(gameObject);

        InitializeAudioDictionary();
        LoadAudioSettings();
    }

    private void Start()
    {
        PlayMusic(menuMusic);
    }

    private void InitializeAudioDictionary()
    {
        sfxDictionary = new Dictionary<string, AudioClip>
        {
            { "habitComplete", habitCompleteSound },
            { "levelUp", levelUpSound },
            { "achievement", achievementSound },
            { "buttonClick", buttonClickSound },
            { "error", errorSound },
            { "xpGain", xpGainSound }
        };
    }

    // MÚSICA
    public void PlayMusic(AudioClip clip, bool loop = true)
    {
        if (musicSource == null || clip == null) return;

        if (musicSource.clip == clip && musicSource.isPlaying)
            return;

        musicSource.clip = clip;
        musicSource.loop = loop;
        musicSource.volume = musicVolume * masterVolume;
        musicSource.Play();
    }

    public void StopMusic()
    {
        if (musicSource != null)
            musicSource.Stop();
    }

    public void PauseMusic()
    {
        if (musicSource != null)
            musicSource.Pause();
    }

    public void ResumeMusic()
    {
        if (musicSource != null)
            musicSource.UnPause();
    }

    // EFECTOS DE SONIDO
    public void PlaySFX(string sfxName)
    {
        if (sfxDictionary.ContainsKey(sfxName))
        {
            PlaySFX(sfxDictionary[sfxName]);
        }
        else
        {
            Debug.LogWarning($"SFX '{sfxName}' no encontrado");
        }
    }

    public void PlaySFX(AudioClip clip)
    {
        if (sfxSource == null || clip == null) return;

        sfxSource.PlayOneShot(clip, sfxVolume * masterVolume);
    }

    public void PlaySFXAtPoint(AudioClip clip, Vector3 position)
    {
        if (clip == null) return;

        AudioSource.PlayClipAtPoint(clip, position, sfxVolume * masterVolume);
    }

    // VOLUMEN
    public void SetMasterVolume(float volume)
    {
        masterVolume = Mathf.Clamp01(volume);
        UpdateVolumes();
        SaveAudioSettings();
    }

    public void SetMusicVolume(float volume)
    {
        musicVolume = Mathf.Clamp01(volume);
        UpdateVolumes();
        SaveAudioSettings();
    }

    public void SetSFXVolume(float volume)
    {
        sfxVolume = Mathf.Clamp01(volume);
        SaveAudioSettings();
    }

    private void UpdateVolumes()
    {
        if (musicSource != null)
            musicSource.volume = musicVolume * masterVolume;
    }

    // GUARDADO/CARGA
    private void SaveAudioSettings()
    {
        PlayerPrefs.SetFloat("MasterVolume", masterVolume);
        PlayerPrefs.SetFloat("MusicVolume", musicVolume);
        PlayerPrefs.SetFloat("SFXVolume", sfxVolume);
        PlayerPrefs.Save();
    }

    private void LoadAudioSettings()
    {
        masterVolume = PlayerPrefs.GetFloat("MasterVolume", 1f);
        musicVolume = PlayerPrefs.GetFloat("MusicVolume", 0.7f);
        sfxVolume = PlayerPrefs.GetFloat("SFXVolume", 1f);
        UpdateVolumes();
    }

    // FUNCIONES DE CONVENIENCIA
    public void PlayHabitCompleteSound()
    {
        PlaySFX("habitComplete");
    }

    public void PlayLevelUpSound()
    {
        PlaySFX("levelUp");
    }

    public void PlayAchievementSound()
    {
        PlaySFX("achievement");
    }

    public void PlayButtonSound()
    {
        PlaySFX("buttonClick");
    }

    public void PlayErrorSound()
    {
        PlaySFX("error");
    }

    public void PlayXPGainSound()
    {
        PlaySFX("xpGain");
    }
}

// ========== UI PARA CONFIGURACIÓN DE AUDIO ==========
public class AudioSettingsUI : MonoBehaviour
{
    [Header("Sliders")]
    public UnityEngine.UI.Slider masterVolumeSlider;
    public UnityEngine.UI.Slider musicVolumeSlider;
    public UnityEngine.UI.Slider sfxVolumeSlider;

    [Header("Value Texts")]
    public TMPro.TextMeshProUGUI masterVolumeText;
    public TMPro.TextMeshProUGUI musicVolumeText;
    public TMPro.TextMeshProUGUI sfxVolumeText;

    private void Start()
    {
        LoadSliderValues();

        masterVolumeSlider.onValueChanged.AddListener(OnMasterVolumeChanged);
        musicVolumeSlider.onValueChanged.AddListener(OnMusicVolumeChanged);
        sfxVolumeSlider.onValueChanged.AddListener(OnSFXVolumeChanged);
    }

    private void LoadSliderValues()
    {
        if (AudioManager.Instance != null)
        {
            masterVolumeSlider.value = AudioManager.Instance.masterVolume;
            musicVolumeSlider.value = AudioManager.Instance.musicVolume;
            sfxVolumeSlider.value = AudioManager.Instance.sfxVolume;

            UpdateVolumeTexts();
        }
    }

    private void OnMasterVolumeChanged(float value)
    {
        if (AudioManager.Instance != null)
        {
            AudioManager.Instance.SetMasterVolume(value);
            UpdateVolumeTexts();
        }
    }

    private void OnMusicVolumeChanged(float value)
    {
        if (AudioManager.Instance != null)
        {
            AudioManager.Instance.SetMusicVolume(value);
            UpdateVolumeTexts();
        }
    }

    private void OnSFXVolumeChanged(float value)
    {
        if (AudioManager.Instance != null)
        {
            AudioManager.Instance.SetSFXVolume(value);
            UpdateVolumeTexts();
            
            // Reproducir sonido de prueba
            AudioManager.Instance.PlayButtonSound();
        }
    }

    private void UpdateVolumeTexts()
    {
        if (AudioManager.Instance != null)
        {
            masterVolumeText.text = $"{(AudioManager.Instance.masterVolume * 100):F0}%";
            musicVolumeText.text = $"{(AudioManager.Instance.musicVolume * 100):F0}%";
            sfxVolumeText.text = $"{(AudioManager.Instance.sfxVolume * 100):F0}%";
        }
    }

    private void OnDestroy()
    {
        masterVolumeSlider.onValueChanged.RemoveListener(OnMasterVolumeChanged);
        musicVolumeSlider.onValueChanged.RemoveListener(OnMusicVolumeChanged);
        sfxVolumeSlider.onValueChanged.RemoveListener(OnSFXVolumeChanged);
    }
}